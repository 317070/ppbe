<?php
/**
 * @file
 * Code for the PirateParty: Workgroup feature.
 */

include_once 'pirateparty_workgroup.features.inc';

/**
 * Implements hook_menu().
 */
function pirateparty_workgroup_menu() {
  $items['node/%node/blog'] = array(
    'title' => t('Blog'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'pirateparty_workgroup_blogmenu_access',
    'access arguments' => array(1),
    'weight' => 1,
  );
  /*$items['node/%node/projects'] = array(
    'title' => t('Issue  tracker'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'pirateparty_workgroup_blogmenu_access',
    'access arguments' => array(1),
    'weight' => 2,
  );*/
  $items['node/%node/agenda'] = array(
    'title' => t('Agenda'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'pirateparty_workgroup_blogmenu_access',
    'access arguments' => array(1),
    'weight' => 2,
  );
  $items['node/%node/reports'] = array(
    'title' => t('Meeting reports'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'pirateparty_workgroup_blogmenu_access',
    'access arguments' => array(1),
    'weight' => 2,
  );
  $items['node/%node/issues'] = array(
    'title' => t('Issue tracker'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'pirateparty_workgroup_blogmenu_access',
    'access arguments' => array(1),
    'weight' => 2,
  );
  /*$items['node/%node/events_past'] = array(
    'title' => t('Past Events'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'pirateparty_workgroup_blogmenu_access',
    'access arguments' => array(1),
    'weight' => 2,
  );*/
  $items['node/%node/discussion'] = array(
    'title' => t('Discussion list'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'pirateparty_workgroup_blogmenu_access',
    'access arguments' => array(1),
    'weight' => 2,
  );
  /*$items['group/%/%/admin/blog_posts'] = array(
    'page callback' => 'views_embed_view',
    'title' => 'Workgroup blog posts',
    'page arguments' => array('og_nodes', 'panel_pane_6', 2),
    'type' => MENU_CALLBACK,
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('update any blog_post content', 1, 2),
  );
  $items['group/%/%/admin/events'] = array(
    'page callback' => 'views_embed_view',
    'title' => 'Workgroup events',
    'page arguments' => array('og_nodes', 'panel_pane_7', 2),
    'type' => MENU_CALLBACK,
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('update any event content', 1, 2),
  );
  $items['group/%/%/admin/blog_post_importers'] = array(
    'page callback' => 'views_embed_view',
    'title' => 'Workgroup events',
    'page arguments' => array('og_nodes', 'panel_pane_8', 2),
    'type' => MENU_CALLBACK,
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('update any event content', 1, 2),
  );*/

  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function pirateparty_workgroup_menu_alter(&$items) {
  $items['user/register']['modal'] = TRUE;
  $items['node/%node/view']['title callback'] = 'pirateparty_workgroup_viewnode_title';
  $items['node/%node/view']['title arguments'] = array(1);
  //$items['node/%node/group']['access callback'] = 'pirateparty_workgroup_group_access';
  //$items['node/%node/group']['access arguments'] = array(1);
  unset($items['node']);
}

function pirateparty_workgroup_group_access($node) {
  dd('he');
  return TRUE;
  if($node->type == 'workgroup') {
    return TRUE;
  }
}

/**
 * Implements template_preprocess_node().
 */
function pirateparty_workgroup_preprocess_node(&$variables) {
  if(empty($variables['node']->type)) {
    return FALSE;
  }
  switch($variables['node']->type) {
    default:
      $account = user_load($variables['node']->uid);
      $node = $variables['node']->nid;
      $variables['node_author_name'] = theme('node_title_with_author', array('node' => $variables['node']));
      $user_view = user_view($account, 'teaser');
      $variables['author_rendered'] = drupal_render($user_view);

      $languages = language_list();
      $flag_icons = '';
      $variables['title_with_flag'] = '<div class="field field-name-title flagged field-type-ds field-label-hidden">
      <h2>' . l($variables['node']->title, 'node/' . $variables['node']->nid) . '</h2></div>';
      foreach($variables['node']->translations->data as $key => $lang) {
        if($key == 'und') { break; }
        $flag_icons .= theme('languageicons_icon', array(
          'language' => $languages[$key],
          'title' => t('This article is available in !lang', array('!lang' => $languages[$key]->name)),
        ));
        $account = user_load($lang['uid']);
        $translators[$account->uid] = l($account->name, 'user/' . $account->uid);
      }

      if(!empty($flag_icons)) {
        $variables['title_with_flag'] = '<div class="field field-name-title flagged field-type-ds field-label-hidden">
        <h2>' . l($variables['node']->title, 'node/' . $variables['node']->nid) . ' <span class="flags">' . $flag_icons . '</span></h2></div>';
        $variables['flags'] = '<div class="flags field label"><span class="label">' . t('Available translations') . '</span>: ' . $flag_icons . '</div>';
      }

      if(!count($translators)){ $translators[] = t('None.'); }
      $variables['translators'] = '<div class="translators field"><span class="label">' . t('Translators') . '</span>: ' . implode(', ', $translators) . '</div>';
      break;

    case 'issue':
      $node = $variables['node'];
      if(!empty($node->field_issue_status['und'][0]['target_id'])) {
        $status_id = $node->field_issue_status['und'][0]['target_id'];
        $variables['classes_array'][] = 'issue_status_' . $status_id;
      }
      break;
  }
}

/**
 * Implements hook_theme().
 */
function pirateparty_workgroup_theme() {
  return array(
    'node_title_with_author' => array(
      'variables' => array('node' => NULL),
      'template' => 'node_title_with_author',
    ),
  );
}

/**
 * Implements hook_node_update().
 */
function pirateparty_workgroup_node_insert($node) {
  switch($node->type) {
    case 'workgroup':
      db_merge('workgroup_postfix_aliases')
        ->key(array('nid' => $node->nid))
        ->fields(array(
            'forw_addr' => '| /etc/postfix/postfix_og_mailinglist/og_mailinglist_postfix_transport.php',
            'alias' => $node->group_email['und'][0]['value'],
        ))
        ->execute();
      break;
  }
}

/**
 * Implements hook_node_update().
 */
function pirateparty_workgroup_node_update($node) {
  switch($node->type) {
    case 'workgroup':
      db_merge('workgroup_postfix_aliases')
        ->key(array('nid' => $node->nid))
        ->fields(array(
            'forw_addr' => '| /etc/postfix/postfix_og_mailinglist/og_mailinglist_postfix_transport.php',
            'alias' => $node->group_email['und'][0]['value'],
        ))
        ->execute();
      break;
  }
}

/**
 * Implements hook_node_update().
 */
function pirateparty_workgroup_node_delete($node) {
  switch($node->type) {
    case 'workgroup':
      $num_deleted = db_delete('workgroup_postfix_aliases')
        ->condition('nid', $node->nid)
        ->execute();
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function pirateparty_workgroup_form_alter(&$form, &$form_state, $form_id) {
  //var_dump($form_id);
  switch($form_id) {
    case 'user_login_block':
      $links[] = l(t('Become a Pirate!'), 'node/697');
      $links[] = l(t('Forgot your password?'), 'user/password');
      $form['links']['#markup'] = theme('item_list', array('items' => $links));
      $form['links']['#weight'] = 100;
      break;

    case 'user_register_form':
      drupal_set_title(t('Become a Pirate!'));
      break;

    case 'user_login':
      drupal_set_title(t('Log in'));
      break;

    case 'user_pass':
      drupal_set_title(t('Request a new password'));
      break;

    case 'event_node_form':
      
      break;

    case 'user_register_form':
    case 'user_profile_form':

      break;

    case 'comment_node_issue_form':
      $form['field_assigned_to']['#prefix'] = '<div class="issue_form">';
      $form['og_group_ref']['#suffix'] = '</div>';

      $form['author']['#prefix'] = '<div class="comment_form">';
      $form['comment_body']['#suffix'] = '</div>';
      $form['actions']['submit']['#value'] = t('Update issue');
      break;

    case 'issue_node_form':
      unset($form['revision_information']);
      $form['actions']['submit']['#value'] = t('Save issue');
      break;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function pirateparty_workgroup_views_pre_render(&$view) {
  if(!empty($view->exposed_data['field_category_tid'])) {
    $term = taxonomy_term_load($view->exposed_data['field_category_tid']);
    if(empty($term->tid)) { return; }
    if(module_exists('i18n_taxonomy')) {
        module_load_include('inc', 'i18n', 'i18n_taxonomy.pages');
        $term = i18n_taxonomy_localize_terms($term);
    }
    $view->build_info['title'] = $term->name;
  }
}

/**
 * Checks if current node is a workgroup.
 */
function pirateparty_workgroup_blogmenu_access($node) {
  if(!empty($node->type) && $node->type == 'workgroup') {
    return TRUE;
  }
}

/**
 * Generates a title for the 'view' node menu item.
 */
function pirateparty_workgroup_viewnode_title($node) {
  if(!empty($node->type) && $node->type == 'workgroup') {
    return 'About us';
  }
  else {
    return 'View';
  }
}

/**
 * Implements hook_og_ui_get_group_admin()
 */
function BACKUP_pirateparty_workgroup_og_ui_get_group_admin($group_type, $gid) {
  $items = array();
  $default_access = og_is_group_default_access($group_type, $gid);

    $items['blog_posts'] = array(
      'title' => t('Blog posts'),
      'description' => t('Administer workgroup blog posts.'),
      // The final URL will be "group/$group_type/$gid/admin/people/add-user".
      // @see og_ui_group_admin_overview().
      'href' => 'admin/blog_posts',
    );
    /*$items['blog_posts_new'] = array(
      'title' => t('Add blog post'),
      'description' => t('Add a new blog post.'),
      // The final URL will be "group/$group_type/$gid/admin/people/add-user".
      // @see og_ui_group_admin_overview().
      'href' => 'admin/blog_posts',
      'localized_options' => array('query' => array('og_group_ref' => $gid)),
    );*/

    $items['events'] = array(
      'title' => t('Events'),
      'description' => t('Administer workgroup events.'),
      // The final URL will be "group/$group_type/$gid/admin/people/add-user".
      // @see og_ui_group_admin_overview().
      'href' => 'admin/events',
    );
    /*$items['events_new'] = array(
      'title' => t('Add event'),
      'description' => t('Add a new event.'),
      // The final URL will be "group/$group_type/$gid/admin/people/add-user".
      // @see og_ui_group_admin_overview().
      'href' => 'node/add/event',
      'localized_options' => array('query' => array('og_group_ref' => $gid)),
    );*/

    $items['blog_post_importers'] = array(
      'title' => t('Blog posts importers'),
      'description' => t('Administer workgroup blog post importers.'),
      // The final URL will be "group/$group_type/$gid/admin/people/add-user".
      // @see og_ui_group_admin_overview().
      'href' => 'admin/blog_post_importers',
    );
    /*$items['blog_post_importers_new'] = array(
      'title' => t('Add blog post importer'),
      'description' => t('Add a new blog post importer.'),
      // The final URL will be "group/$group_type/$gid/admin/people/add-user".
      // @see og_ui_group_admin_overview().
      'href' => 'node/add/blog_post_importers',
      'localized_options' => array('query' => array('og_group_ref' => $gid)),
    );*/

  return $items;
}



/**
 * Implements hook_help().
 */
function pirateparty_workgroup_help($path, $arg) {
  switch($path) {

    case 'reports':
      $output = '<div>' . t('Follow activity in the pirateparty with these meeting reports.') . '</div>';
      $output .= '<div>' . l(t('Add a new meeting report'), 'node/add/meeting-report') . '</div>';
      return $output;
      break;

    case 'agenda':
      $output = '<div>' . t('Come to a pirate event, meeting, beer meeting or online meeting.') . '</div>';
      $output .= '<div>' . l(t('Add a new event'), 'node/add/meeting-report') . '</div>';
      return $output;
      break;

    case 'issues':
      $output = '<div>' . t("This is the issue overview of all groups and meeting reports.") . '</div>';
      $output .= '<div>' . t("If you have a public question, you've come to the right place.") . '</div>';
      $output .= '<div>' . l(t('Add a new issue'), 'node/add/issue') . '</div>';
      return $output;
      break;
  }
}

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function pirateparty_workgroup_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  if ($entity_type == 'node') {
    $targets['discussion_list'] = array(
      'name' => t('Discussion list by to email address'),
      'description' => t('Description of what my second custom node field does.'),
      'callback' => 'discussion_list_by_to_email_callback',
    );
  }
}

/**
 * custom feeds target for the discussion lists.
 */
function discussion_list_by_to_email_callback($source, $entity, $target, $value, $mapping) {
  $term = array_shift(taxonomy_get_term_by_name($value));
  $entity->field_discussion_list[$entity->language][0]['tid'] = 0;
  if($term->tid) {
    $entity->field_discussion_list[$entity->language][0]['tid'] = $term->tid;
  }
}



