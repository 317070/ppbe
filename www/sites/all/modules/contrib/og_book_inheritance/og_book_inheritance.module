<?php
// $Id: og_book_inheritance.module,v 1.3.2.1 2009/07/07 11:12:43 agileware Exp $

/**
 * @file
 * This module provides functionality for inheritance when assigning groups to book pages.
 *
 * It is used along with the og module and the book module
 */

/**
 * Implementation of hook_help()
 */
function og_book_inheritance_help($path, $arg) {
  switch ($path) {
    case 'admin/help#og_book_inheritance':
      return '<p>' . t('The og book inheritance module provides functionality for inheritance when assigning groups to book pages. To set up this module for use see the settings page by following the link below.') . '</p>';
  }
}

/**
 * Implementation of hook_menu()
 */
function og_book_inheritance_menu() {
  $items = array();

  $items['admin/config/group/group-book-inheritance'] = array(
    'title' => 'Group book inheritance',
    'description' => 'Manage settings for group inheritance for books.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_book_inheritance_settings_form'),
    'access arguments' => array('administer group'),
    'weight' => 1
  );

  return $items;
}

/**
 * Implementation of hook_nodeapi()
 */
function og_book_inheritance_node_presave($node) {
  $book_types = array();
  if (module_exists('book_made_simple')) {
    if (variable_get('book_made_simple_add_types', FALSE)) {
      foreach (variable_get('book_made_simple_add_types', '') as $types) {
        if ($types != "0") $book_types[] = $types;
      }
    }
  } else {
    if (is_array(variable_get('book_child_type', FALSE))) {
      foreach (variable_get('book_child_type', '') as $types) {
        $book_types[] = $types;
      }
    } else {
      $book_types[] = variable_get('book_child_type', '');
    }
  }
  if (in_array($node->type, $book_types)) {
    switch (variable_get('og_book_inheritance_inherit_when', 'if_empty')) {
      case 'user_exclusive':
        if ($node->inherit) {
          if ($node->book['bid']) {
            $parent_node = og_book_inheritance_get_parent_node($node->book);
            $node->group_audience['und'] = $parent_node->group_audience['und'];
          }
        }
        break;
      case 'user_plus':
        if ($node->inherit) {
          if ($node->book['bid']) {
            $parent_node = og_book_inheritance_get_parent_node($node->book);
            $node->group_audience['und'] = array_unique(array_merge($node->group_audience['und'], $parent_node->group_audience['und']));
          }
        }
        break;
      case 'if_empty':
        if ($node->book['bid'] && empty($node->og_groups)) {
          $parent_node = og_book_inheritance_get_parent_node($node->book);
            $node->group_audience['und'] = $parent_node->group_audience['und'];
        }
        break;
      case 'if_parent_exclusive':
        if ($node->book['bid']) {
          $parent_node = og_book_inheritance_get_parent_node($node->book);
            $node->group_audience['und'] = $parent_node->group_audience['und'];
        }
        break;
      case 'if_parent_plus':
        if ($node->book['bid']) {
          $parent_node = og_book_inheritance_get_parent_node($node->book);
          $node->group_audience['und'] = array_unique(array_merge($node->group_audience['und'], $parent_node->group_audience['und']));
        }
        break;
    }
    unset($book_types);
    unset($types);
  }
}

function og_book_inheritance_node_validate($node) {
  $book_types = array();
  if (module_exists('book_made_simple')) {
    if (variable_get('book_made_simple_add_types', FALSE)) {
      foreach (variable_get('book_made_simple_add_types', '') as $types) {
        if ($types != "0") $book_types[] = $types;
      }
    }
  } else {
    if (is_array(variable_get('book_child_type', FALSE))) {
      foreach (variable_get('book_child_type', '') as $types) {
        $book_types[] = $types;
      }
    } else {
      $book_types[] = variable_get('book_child_type', '');
    }
  }  
  if (in_array($node->type, $book_types)) {
    if (variable_get('og_book_inheritance_enabled', FALSE) && variable_get('og_book_inheritance_required', FALSE)) {
      $inherit_when = variable_get('og_book_inheritance_inherit_when', 'if_empty');
      if ($inherit_when == 'user_exclusive' || $inherit_when == 'if_parent_exclusive') {
        if (!$node->book['bid'] && empty($parent_node->og_groups)) {
          form_set_error('og_groups', 'This book page does not have a parent page.  This book page must have a parent with at least one group.');
        }
        else {
          $parent_node = og_book_inheritance_get_parent_node($node->book);
          if (empty($parent_node->og_groups)) {
            form_set_error('og_groups', 'The parent of this book page does not have a group assigned.  The parent book page must have at least one group.');
          }
        }
      }
      else {
        if (empty($node->og_groups)) {
          if (!$node->book['bid']) {
            form_set_error('og_groups', 'This book page does not have a parent page.  In this case you must select a group for this book page.');
          }
          else {
            $parent_node = og_book_inheritance_get_parent_node($node->book);
            if (empty($parent_node->og_groups)) {
              form_set_error('og_groups', 'The parent of this book page does not have a group assigned.  In this case you must select a group for this book page.');
            }
          }
        }
      }
    }
  }
  unset($book_types);
  unset($types);
}

/**
 * Implementation of hook_form_alter()
 */
function og_book_inheritance_form_alter(&$form, &$form_state, $form_id) {
  $book_types = array();
  if (module_exists('book_made_simple')) {
    if (variable_get('book_made_simple_add_types', FALSE)) {
      foreach (variable_get('book_made_simple_add_types', '') as $types) {
        if ($types != "0") $book_types[] = $types . '_node_form';
      }
    }
  } else {
    if (is_array(variable_get('book_child_type', FALSE))) {
      foreach (variable_get('book_child_type', '') as $types) {
        $book_types[] = $types . '_node_form';
      }
    } else {
      $book_types[] = variable_get('book_child_type', '') . '_node_form';
    }
  }  
  if (in_array($form_id, $book_types) && variable_get('og_book_inheritance_enabled', FALSE)) {
    $inherit_when = variable_get('og_book_inheritance_inherit_when', 'if_empty');
    switch ($inherit_when) {
      case 'user_exclusive':
        $value = "If you select to use this page's parent's group via the checkbox below, the parent's groups will be used.  Any groups you select here will be ignored.";
        $value .= variable_get('og_book_inheritance_required', FALSE) ? ' If there is no parent or the parent has no groups you must select a group.' : ' If there is no parent or the parent has no groups, no groups will be selected.';
        $title = "Use parent's groups (your selections will be ignored)";
        break;
      case 'user_plus':
        $value = "If you select to use this page's parent's group via the checkbox below, the parent's groups will be added to your selection.";
        $value .= variable_get('og_book_inheritance_required', FALSE) ? ' If there is no parent or the parent has no groups you must select a group.' : '';
        $title = "Add parent's groups to your selection";
        break;
      case 'if_empty':
        $value = "If no group is selected the parent's groups will be used.";
        $value .= variable_get('og_book_inheritance_required', FALSE) ? ' If there is no parent or the parent has no groups you must select a group.' : '';
        break;
      case 'if_parent_exclusive':
        $value = "If this book page has a parent, the parent's groups will be used and any groups you have selected will be ignored.  Otherwise your selection will be used.";
        $value .= variable_get('og_book_inheritance_required', FALSE) ? ' If there is no parent or the parent has no groups you must select a group.' : ' If there is no parent or the parent has no groups, no groups will be selected.';
        break;
      case 'if_parent_plus':
        $value = "If this book page has a parent, the parent's groups will be added to your selection.";
        $value .= variable_get('og_book_inheritance_required', FALSE) ? ' If there is no parent or the parent has no groups you must select a group.' : '';
        break;
    }

    $form['og_nodeapi']['visible']['parent_message'] = array(
      '#type' => 'item',
      '#value' => t($value),
      '#weight' => -20,
    );
    if ($inherit_when == 'user_plus' || $inherit_when == 'user_exclusive') {
      $form['og_nodeapi']['visible']['inherit'] = array(
        '#type' => 'checkbox',
        '#title' => t($title),
        '#default_value' => variable_get('og_book_inheritance_user_checkbox_default', FALSE),
        '#weight' => -19.5,
      );
    }
  }
  unset($book_types);
  unset($types);
}

/**
 * Settings form
 */
function og_book_inheritance_settings_form() {

  $inherit_from_options = array(
    'parent' => t('Use immediate parent groups'),
    'top' => t('Use top level parent groups')
  );

  $inherit_when_options = array(
    'if_empty' => t('Parents groups are always used if no groups are selected'),
    'if_parent_exclusive' => t('Parents groups are always used if a parent exists (discarding any user selections)'),
    'if_parent_plus' => t('Parents groups are always used if a parent exists (in addition to user selections)'),
    'user_exclusive' => t('User can select to use parents groups via a checkbox (discarding any user selections)'),
    'user_plus' => t('User can select to use parents groups via a checkbox (in addition to user selections)')
  );

  $form['og_book_inheritance_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => 'Enable group inheritance',
    '#default_value' => variable_get('og_book_inheritance_enabled', FALSE),
  );
  $form['og_book_inheritance_inherit_from'] = array(
    '#type' => 'select',
    '#title' => t('Inherit from'),
    '#default_value' => variable_get('og_book_inheritance_inherit_from', 'parent'),
    '#options' => $inherit_from_options,
  );
  $form['og_book_inheritance_inherit_when'] = array(
    '#type' => 'select',
    '#title' => t('Inherit when'),
    '#default_value' => variable_get('og_book_inheritance_inherit_when', 'if_empty'),
    '#options' => $inherit_when_options,
  );
  $form['og_book_inheritance_user_checkbox_default'] = array(
    '#type' => 'checkbox',
    '#title' => 'User checkbox checked by default',
    '#description' => t("If 'Inherit when' is set to give the user the option to use the parent's groups via checkbox, checking this makes that checkbox default to checked."),
    '#default_value' => variable_get('og_book_inheritance_user_checkbox_default', FALSE),
  );
  $form['og_book_inheritance_required'] = array(
    '#type' => 'checkbox',
    '#title' => 'Require a selection or inheritance',
    '#description' => t("If checked, the user will not be able to continue unless they have selected a group or inheritance is set up and the page's parents have groups."),
    '#default_value' => variable_get('og_book_inheritance_required', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Returns the parent node based on the og_book_inheritance_inherit_from variable
 */
function og_book_inheritance_get_parent_node($book) {
  if (variable_get('og_book_inheritance_inherit_from', 'parent') == 'top') {
    $parent_node = node_load($book['bid']);
  }
  else {
    $parent = book_link_load($book['plid']);
    $parent_node = node_load($parent['nid']);
  }
  if (array_key_exists('group_group', $parent_node)) {
    $parent_node->group_audience['und']['0']['gid'] = $parent_node->group_group['und']['0']['value'];
    $parent_node->group_audience['und']['0']['state'] = '1';
    unset($parent_node->group_group);
  }
  return $parent_node;
}
